#!/usr/bin/env python3
import os
import sys
import json
import pathlib
from dataclasses import dataclass, field
from typing import Dict, Optional


@dataclass
class RootFSPath:
    path: str
    owner: str = field(init=False)
    group: str = field(init=False)
    kind: Optional[str] = field(init=False)

    def __post_init__(self):
        p = pathlib.Path(self.path)

        self.owner = p.owner()
        self.group = p.group()

        if p.is_dir():
            self.kind = 'directory'
        if p.is_file():
            self.kind = 'file'


@dataclass
class Path:
    path: str
    owner: str = field(init=False)
    group: str = field(init=False)
    kind: str = field(init=False)
    child: Optional['Field'] = field(default=None)
    sibling: Optional['Field'] = field(default=None)

    def __post_init__(self):
        p = pathlib.Path(self.path)

        self.owner = p.owner()
        self.group = p.group()
        if p.is_dir():
            self.kind = 'directory'
        if p.is_file():
            self.kind = 'file'




# class RootFS:
#     base_paths = [
#         'bin',
#         'boot',
#         'dev',
#         'etc',
#         'home',
#         'lib',
#         'lib64',
#         'media',
#         'mnt',
#         'opt',
#         'proc',
#         'root',
#         'run',
#         'sbin',
#         'srv',
#         'sys',
#         'tmp',
#         'usr',
#         'var',
#     ]
#     def __init__(self, basedir):
#         self.basedir = basedir
#         self.data = {}
# 
#     def setup(self):
#         for path in self.base_paths:
#             os.makedirs(f'{self.basedir}/{path}', exist_ok=True)
# 
#     def sync(self):
#         directory_data = {}
#         
#         for root, dirs, files in os.walk(self.basedir):
#             current_directory = directory_data
#             for directory in os.path.relpath(root, self.basedir).split(os.path.sep):
#                 full_path = f'{self.basedir}/{directory}'
#                 current_directory = current_directory.setdefault(directory, RootFSPath(full_path))
# 
#             # for filename in files:
#             #     file_path = os.path.join(root, filename)
#             #     current_directory[filename] = {
#             #         'file': RootFSFile(file_path)
#             #     }
# 
#         self.data = directory_data
# 
#     def __str__(self):
#         return json.dumps(self.data, indent=2)


def sync(path):
    for root, dirs, files in os.walk(path):
        current_directory = path

        for directory in os.path.relpath(root, path).split(os.path.sep):
            full_path = f'{path}/{directory}'
            # current_directory = current_directory.setdefault(directory, RootFSPath(full_path))
 



def main(basedir):
    rootfs = Path(basedir, sibling=None)
    sync(rootfs)

    print(rootfs)


if __name__ == '__main__':
    main(sys.argv[1])
